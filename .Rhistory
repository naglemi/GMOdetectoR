.export = c("normalization_and_regression_over_one_plate")) %dopar% {
normalization_and_regression_over_one_plate(files_to_loop = files_to_loop,
i = i,
chroma_in_backend = chroma_in_backend,
job_id)
}
stopCluster(cl)
}
check_success_high_throughput <- function(files_to_loop, sum_stats_file, grid_type, pattern_to_exclude = "chroma"){
# This line assumes that all chroma standard files contain "chroma" unless pattern_to_exclude option is
# modified by user. These will be excluded.
files_to_loop <- files_to_loop[!grepl(pattern_to_exclude, files_to_loop)]
# We will create a dt of all possible grid items for the specified grid type, then compare this to the output
# so we can see if anything is missing.
sum_stats_file_in <- fread(sum_stats_file)
colnames(sum_stats_file_in)[1:2] <- c("file", "grid_item")
comprehensive_dt <- data.table(file = c(rep(files_to_loop, times = 1, each = grid_type)),
grid_item = c(rep(1:12, times = length(files_to_loop))))
comprehensive_dt_with_results <- merge(sum_stats_file_in,
comprehensive_dt, by=c("file", "grid_item"),
all.x = FALSE,
all.y = TRUE)
return(comprehensive_dt_with_results)
}
what_to_plot <- decide_what_to_plot(mode = c(2))
tempdir("/scratch2/NSF_GWAS/Rtmp/")
input <- list()
input$hys_CLS_PCA <- 2
#input$grid_position <- 18
input$denoise_threshold_FP <- 0
input$denoise_threshold_Chl <- 0
all_timepoints <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EB",
full.names = TRUE)
for(timepoint in all_timepoints){
files_to_loop <- list.files(timepoint,
pattern=".raw",
full.names = TRUE)
job_id <- str_split_fixed(timepoint, "/", 5)[5]
print(paste0("Starting workflow for ", job_id))
normalization_and_regression_over_all_data_one_timepoint(files_to_loop = files_to_loop,
maximum_CPU_number = 10,
job_id = job_id)
output <- check_success_high_throughput(files_to_loop = files_to_loop,
sum_stats_file = paste0("/scratch2/NSF_GWAS/GMOdetectoR/output/",
Sys.Date(),
"/",
job_id,
"/sum_stats.csv"),
grid_type = 12)
files_failed_first_time <- unique(c(files_to_loop[1], output[is.na(output$V3),]$file))
length(files_failed_first_time)
# 18
if(length(files_failed_first_time)>1){
stop("Not all jobs completed.")
}
print("Complete. On to the next one...")
}
Sys.time() # Started at 10:44pm
library(usethis)
use_package("shiny")
use_package("hyperSpec")
use_package("data.table")
use_package("scales")
use_packages("gridExtra")
use_package("gridExtra")
use_package("tools")
use_package("stringr")
use_package("foreach")
use_package("doParallel")
library(GMOdetectoR)
library(GMOdetectoR)
library(GMOdetectoR)
library(use_this)
usethis
library(usethis)
use_package("RcppEigen")
library(RcppEigen)
library(GMOdetectoR)
library(GMOdetectoR)
tempdir("/scratch2/NSF_GWAS/Rtmp/")
setwd("/scratch2/NSF_GWAS/GMOdetectoR/")
# Define server logic required to draw a histogram
# server <- function(input, output, session) {
img_in_backend <<- load_image(image_path = paste0("/scratch2/NSF_GWAS/macroPhor_Array/CT_CU_CV_raw/wk6/",
filename))
filename <- "CV3_F1.9_I5.0_L100_cyan_001552_9_1_4.raw"
# Define server logic required to draw a histogram
# server <- function(input, output, session) {
img_in_backend <<- load_image(image_path = paste0("/scratch2/NSF_GWAS/macroPhor_Array/CT_CU_CV_raw/wk6/",
filename))
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw")
files_list
img_in_backend <<- load_image(image_path = files_list[2])
setwd("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/")
files_list <- list.files(".", pattern=".raw")
files_list
img_in_backend <<- load_image(image_path = files_list[2])
reduced_img_in_backend <- reduce_image(img_in_backend)
what_to_plot <- decide_what_to_plot(mode = c(2))
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
setwd("/scratch2/NSF_GWAS/GMOdetectoR")
list.files(".")
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
Z
recover()
BETA <- Z %*% t_spectrum_in_to_CLS
recover()
BETA <- Z %*% t_spectrum_in_to_CLS
dim(BETA)
Beta
spectrum_formatted <- t_spectrum_in_to_CLS[,1]
Beta <- Z %*% spectrum_formatted
dim(Beta)
RESID <- t_spectrum_in_to_CLS - (Xmatrix %*% BETA)
dim(RESID)
P <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
N <- nrow(Xmatrix)
MSE <- (t(RESID) %*% RESID)/(N-P-1)
dim(MSE)
MSE[1:10,1:10]
resid <- spectrum_formatted - (Xmatrix %*% Beta)
p <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
n <- nrow(Xmatrix)
mse <- (t(resid) %*% resid)/(n-p-1)
mse
ptm <- proc.time()
MSE <- diag((t(RESID) %*% RESID)/(N-P-1))
print((proc.time()-ptm))
library(WGCNA)
install.packages("WGCNA")
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
Beta <- Z %*% spectrum_formatted
resid <- spectrum_formatted - (Xmatrix %*% Beta)
p <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
n <- nrow(Xmatrix)
MSE <- (t(resid) %*% resid)/(n-p-1)
Beta.covar.matrix <- as.vector(MSE)*A
Beta.se <- sqrt(diag(Beta.covar.matrix))
BETA <- Z %*% t_spectrum_in_to_CLS
recover()
BETA <- Z %*% t_spectrum_in_to_CLS
RESID <- t_spectrum_in_to_CLS - (Xmatrix %*% BETA)
P <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
N <- nrow(Xmatrix)
MSE <- diag((transposeBigData(RESID) %*% RESID)/(N-P-1))
print((proc.time()-ptm))
library(profvis)
profvis({
MSE <- diag((transposeBigData(RESID) %*% RESID)/(N-P-1))
})
242.59/60
profvis({
MSE <- diag((t(RESID) %*% RESID)/(N-P-1))
})
262.080/60
library(reticulate)
np <- import("numpy", convert=FALSE)
(x <- np$transpose(RESID))
x
dim(x)
typeof(x)
(x)
x2 <- py_to_r(x)
dim(x2)
dim(RESID)
profvis({
(RESIDt <- np$transpose(RESID))
(RESIDtRESID <- np$multiply(RESIDt, RESID))
py_to_r(RESIDtRESID)
MSE <- diag(RESIDtRESID/(N-P-1))
#MSE <- diag((t(RESID) %*% RESID)/(N-P-1))
})
profvis({
(RESIDt <- np$transpose(RESID))
(RESIDtRESID <- np$matmul(RESIDt, RESID))
py_to_r(RESIDtRESID)
MSE <- diag(RESIDtRESID/(N-P-1))
#MSE <- diag((t(RESID) %*% RESID)/(N-P-1))
})
RESIDtRESIDr <- py_to_r(RESIDtRESID)
dim(RESIDtRESIDr)
RESIDfloat <- as.float(RESID)
is.double(RESID)
RESID[1:10,1:10]
t_spectrum_in_to_CLS[1:10,1:10]
round(RESID[1:10,1:10])
RESID <- round(t_spectrum_in_to_CLS - (Xmatrix %*% BETA))
P <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
N <- nrow(Xmatrix)
(RESIDt <- np$transpose(RESID))
(RESIDtRESID <- np$matmul(RESIDt, RESID))
tf <- import("tensorflow", convert=FALSE)
# np <- import("numpy", convert=FALSE)
use_condaenv("deeplab")
gc()
# np <- import("numpy", convert=FALSE)
use_condaenv("deeplab")
tempdir("/scratch2/NSF_GWAS/Rtmp/")
setwd("/scratch2/NSF_GWAS/GMOdetectoR/")
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
library(GMOdetectoR)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
BETA <- Z %*% t_spectrum_in_to_CLS
recover()
BETA <- Z %*% t_spectrum_in_to_CLS
RESID <- t_spectrum_in_to_CLS - (Xmatrix %*% BETA)
P <- ncol(Xmatrix) - intercept # minus one if we have intercept because we don't count the intercept as a parameter
N <- nrow(Xmatrix)
ptm <- proc.time()
# np <- import("numpy", convert=FALSE)
use_condaenv("deeplab")
library(reticulate)
# np <- import("numpy", convert=FALSE)
use_condaenv("deeplab")
(RESIDt <- np$transpose(RESID))
?import
np <- import("numpy", convert=FALSE)
tf <- import("tensorflow", convert=FALSE)
reticulate::py_config()
use_python("/scratch2/NSF_GWAS/anaconda3/envs/deeplab/bin/python")
np <- import("numpy", convert=FALSE)
tf <- import("tensorflow", convert=FALSE)
use_condaenv("deeplab")
np <- import("numpy", convert=FALSE)
tf <- import("tensorflow", convert=FALSE)
py_install("tensorflow")
tf <- import("tensorflow", convert=FALSE)
reticulate::py_config()
py_install("gnumpy")
gpu <- import("gnumpy", convert=FALSE)
use_condaenv("r-reticulate")
np <- import("numpy", convert=FALSE)
tf <- import("tensorflow", convert=FALSE)
gpu <- import("gnumpy", convert=FALSE)
conda_install("r-reticulate", "gnumpy")
gpu <- import("gnumpy", convert=FALSE)
py_install("gnumpy")
gpu <- import("gnumpy", convert=FALSE)
use_condaenv(condaenv = "deeplab")
use_condaenv(condaenv = "deepewrfgtsertflab")
use_condaenv(condaenv = "deeplab", conda = "/scratch2/NSF_GWAS/anaconda3/condabin/conda")
tf <- import("tensorflow", convert=FALSE)
conda_list()
use_condaenv("deeplab")
tf <- import("tensorflow", convert=FALSE)
?use_condaenv()
use_condaenv("deeplab")
(sys$version)
?loess
?predict
?loess
# fitting a smooth curve https://stackoverflow.com/questions/3480388/how-to-fit-a-smooth-curve-to-my-data-in-r
#' Title
#'
#' @param spectra_path an absolute or relative data path to a csv file containing spectra with columns `emission wavelength (nm)` and `Normalized emission`
#' @param wavelengths a vector of wavelengths (for user-specific camera) we wish to fit a spectra to... can be taken from 'wavelengths' attribute of hyperSpec object (e.g. hyperimage@wavelengths)
#' @param plot TRUE or FALSE - whether to make plot of fitted spectra in addition to outputting it as a dataframe
#'
#' @return a data frame with spectra fitted to the specific wavelengths on the user's camera
#' @export
#'
#' @examples read_plot_spectra(path, wavelengths = wavelengths)
#'
#'
read_plot_spectra <- function(spectra_path, wavelengths, plot=FALSE){
pub_spectra_in <- fread(spectra_path)
pub_emission_spectrum <- data.frame(wavelength=pub_spectra_in$`emission wavelength (nm)`,
intensity=pub_spectra_in$`Normalized emission`)
fit <- loess(intensity~wavelength, data=pub_emission_spectrum, span=0.1)
if(plot==TRUE){
plot(pub_emission_spectrum,
main=(paste0(basename(tools::file_path_sans_ext(spectra_path)), " (Published)")),
xlab="Wavelength",
ylab="Normalized emission")
lines(pub_emission_spectrum$wavelength,
predict(fit,pub_emission_spectrum$wavelength), col='red', lwd=2)
}
predict_from <- data.frame(wavelength=wavelengths)
predictions <- predict(fit, predict_from)
scaled_emission_spectra <- cbind(wavelengths, predictions)
if(plot==TRUE){
plot(scaled_emission_spectra,
main=(paste0(basename(tools::file_path_sans_ext(spectra_path)), " (Fitted for macroPhor Array camera)")),
xlab="Wavelength",
ylab="Normalized emission")
# Note here we are plotting the published lines over our data (should be the same as if we used our lines)
lines(pub_emission_spectrum$wavelength,
predict(fit,pub_emission_spectrum$wavelength), col='red', lwd=2)
}
#return(predictions)
fitted_spectra_dataframe <- as.data.frame(cbind(wavelengths, predictions))
colnames(fitted_spectra_dataframe) <- c("Wavelength", "Normalized intensity (fitted)")
return(fitted_spectra_dataframe)
}
spectra_path <- '/scratch2/NSF_GWAS/GMOdetectoR/spectra_library/ZsYellow.csv'
library(GMOdetectoR)
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
library(GMOdetectoR)
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
spectra
path <- '/scratch2/NSF_GWAS/GMOdetectoR/spectra_library/ZsYellow.csv'
path
read_plot_spectra(path,
wavelengths = wavelengths)
pub_spectra_in <- fread(spectra_path)
spectra_path <- path
pub_spectra_in <- fread(spectra_path)
pub_emission_spectrum <- data.frame(wavelength=pub_spectra_in$`emission wavelength (nm)`,
intensity=pub_spectra_in$`Normalized emission`)
fit <- loess(intensity~wavelength, data=pub_emission_spectrum, span=0.1)
predict_from <- data.frame(wavelength=wavelengths)
predictions <- predict(fit, predict_from)
fit
predict_from <- data.frame(wavelength=wavelengths)
predictions <- predict(fit, predict_from)
predictions
dim(predictions)
length(predictions)
fit
predict_from
predictions
fit
library(shiny)
library(RcppEigen)
library(hyperSpec)
library(data.table)
library(scales)
library(gridExtra)
library(tools)
library(stringr)
library(foreach)
library(doParallel)
library(Brobdingnag)
tempdir("/scratch2/NSF_GWAS/Rtmp/")
setwd("/scratch2/NSF_GWAS/GMOdetectoR/")
source("/scratch2/NSF_GWAS/GMOdetectoR/GMOdetectoRv0.32cool.R")
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
recover()
library(GMOdetectoR)
library(shiny)
library(RcppEigen)
library(hyperSpec)
library(data.table)
library(scales)
library(gridExtra)
library(tools)
library(stringr)
library(foreach)
library(doParallel)
library(Brobdingnag)
tempdir("/scratch2/NSF_GWAS/Rtmp/")
setwd("/scratch2/NSF_GWAS/GMOdetectoR/")
#source("/scratch2/NSF_GWAS/GMOdetectoR/GMOdetectoRv0.32cool.R")
library(GMOdetectoR)
files_list <- list.files("/scratch2/NSF_GWAS/macroPhor_Array/T16_DEV_genes/EA/wk7/", pattern=".raw",
full.names = TRUE)
what_to_plot <- decide_what_to_plot(mode = c(2))
normalization_and_regression_over_one_plate(files_to_loop = files_list,
i = 2,
#normalize = FALSE,
#chroma_in_backend = chroma_in_backend,
job_id = "vectorize_090120",
by_explant = TRUE,
intercept = 1,
FP_threshold = 0,
Chl_threshold = 0,
grid_type = 12,
record_residuals = 1,
plotting = 1,
desired_wavelength_range = c(545, 722),
fluorophore_ID_vector = c("DsRed", "ZsYellow", "Chl", "Diffraction"))
browser()
browser()
browser()
